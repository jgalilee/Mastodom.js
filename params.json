{"name":"mastodom.js","body":"# masterdom.js\r\n\r\n## Javascript alias\r\n\r\nMastodom can be called using Mn (because if you look hard and make a wish it kind of starts to look like a mastodon) or Mastodom.\r\nYou can't (as far as I know) make a new instance of mastdom.js and it won't even work with the new command.\r\n\r\n## Methods\r\n\r\n### getDefaultElementType()\r\n\r\nReturns the default element type, by default this is 'div'.\r\n\r\n### setDefaultElementType(newType)\r\n\r\nSets the default element type to newType (must be an instance of a string). Returns true if the type was changed, false otherwise.\r\n\r\n### createElement()\r\n\r\nAccepts the following specification. Everything in the specification is option. If no type is defined the default type is used.\r\nReturns the root of the resulting DOM tree.\r\n\r\n    {\r\n        parent: object, // Reference to the parent element. Can also be blank, can't be a specification.\r\n        type: '',  // Type of element to construct. Can also be a list of types where each is a child of the previous.\r\n        content: 'Hello World', // Inner HTML of the element.\r\n        attributes: { // Optional attributes (added as key=\"value\") for the element.\r\n            id: '',\r\n            class: ''\r\n        },\r\n        children: [] // List of specifications or DOM objects to append to the specified dom element.\r\n    }\r\n\r\n## Example\r\n\r\nThere is an example of it being used in the repo.\r\n\r\ndocument.createElement()\r\n-----------------------\r\n\r\n    conversation = document.createElement('div');\r\n    Jack1 = document.createElement('div');\r\n    Jack1.innerHTML = 'Jack: Hey Richie';\r\n    conversation.appendChild(Jack1);\r\n    Richie1 = document.createElement('div');\r\n    Richie1.innerHTML = 'Richie: Hey Jack';\r\n    conversation.appendChild(Richie1);\r\n    Jack2 = document.createElement('div');\r\n    Jack2.innerHTML = 'Jack: Check out this picture of a cat!';\r\n    conversation.appendChild(Jack2);\r\n    catDiv = document.createElement('div');\r\n    cat = document.createElement('img')\r\n    cat.setAttribute('src', 'cat1.jpg')\r\n    catDiv.appendChild(cat);\r\n    conversation.appendChild(catDiv);\r\n    document.body.appendChild(conversation);\r\n\r\n\r\nmasterdom.js createElement()\r\n---------------------------\r\n\r\n    createElement({\r\n      parent: document.body,\r\n      type: 'div',\r\n      children: [\r\n        { type: 'div', content: 'Jack: Hey Richie!' },\r\n        { type: 'div', content: 'Richie: Hey Jack!' },\r\n        { type: 'div', content: 'Jack: Check out this picture of a cat!', children: [\r\n          { type: ['div', 'span', 'img'], attributes: { src: 'cat1.jpg'} }]\r\n        }\r\n      ]\r\n    });\r\n\r\nClarification of type\r\n---------------------\r\n\r\nSpecifying a list of element types creates a tree branch of the elements specified.\r\nIt applies the element settings to the leaf element.\r\n\r\n    <div>\r\n        <span>\r\n            <img src=\"cat1.jpg\"></img>\r\n        </span>\r\n    </div>\r\n","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}